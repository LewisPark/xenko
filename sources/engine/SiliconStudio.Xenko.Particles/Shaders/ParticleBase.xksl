// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.

// TODO Move these definitions into a more base class
#ifndef True
# define True true
#endif

// TODO Move these definitions into a more base class
#ifndef False
# define False false
#endif

#ifndef UsesSoftEdge
# define UsesSoftEdge false
#endif

class ParticleBase : ShaderBase, Texturing
{
    // -------------------------------------
    // Resources
    // -------------------------------------
    rgroup PerMaterial
    {
        stage Texture2D TextureDepth;
    }

    // -------------------------------------
    // streams
    // -------------------------------------
    stage stream float4 Position : POSITION;

    // -------------------------------------
    // conditional streams - may or may not be present depending on existing particle fields
    // -------------------------------------
    //stage stream float4 Color : COLOR;
    nointerpolation stage stream float Lifetime : BATCH_LIFETIME;
    nointerpolation stage stream float RandomSeed : BATCH_RANDOMSEED; // Ideally should be uint. Note! The xksl doesn't support nointerpolation, so cast the float as int before using it

    // -------------------------------------
    // uniforms
    // -------------------------------------

    // !When a bigger structure (float4) follow a smaller structure (float) the binding seems off
    // Declare the uniforms in the order float4x4 > float4 > float > uint

    cbuffer PerView
    {
        stage float4x4 ViewMatrix;
        stage float4x4 ProjectionMatrix;
        stage float4x4 ViewProjectionMatrix;

        // .x - Width, .y - Height, .z - Near, .w - Far
        stage float4   ViewFrustum;
    }

    cbuffer PerMaterial
    {
        stage float4 ColorScale;

        // When the value is 0 there is no occlusion (100% emissive), when it is 1 there is 100% occlusion (still limited by alpha)
        stage float AlphaAdditive;

        // Z offset is how much the depth should be adjusted when rendering
        stage float ZOffset;

        // 0 if disabled, equal to 1/Distance otherwise
        stage float SoftEdgeInverseDistance;
    }
            
    // -------------------------------------
    // VertexShader
    // -------------------------------------
    stage override void VSMain()
    {
        float4 worldPos = streams.Position;

        float4 viewPos = mul(worldPos, ViewMatrix);

        streams.ShadingPosition = mul(viewPos, ProjectionMatrix);
    }

    // Shading of the sprite
    stage override void PSMain()
    {
        float4 colorTarget = Shading();

        if (UsesSoftEdge)
        {
            // SoftEdge START
            float screenWidth  = ViewFrustum.x; //1280;
            float screenHeight = ViewFrustum.y; //720;
            float zNear = ViewFrustum.z;        //0.1;
            float zFar = ViewFrustum.w;         //1000;

            var screenCoords = streams.ShadingPosition.xy;
            screenCoords.x /= screenWidth;
            screenCoords.y /= screenHeight;

            // Read depth
            float opaqueDepth = TextureDepth.Sample(Texturing.PointSampler, screenCoords).r;
            float ownDepth = streams.ShadingPosition.z;

            // Get the linear opaque depth
            float linearZOwn = 2 * zFar * zNear / (zFar + zNear - (zFar - zNear) * (2 * ownDepth - 1));
            float linearZ = 2 * zFar * zNear / (zFar + zNear - (zFar - zNear) * (2 * opaqueDepth - 1));

            // TODO Maybe set upper and lower bounds for more interesting effects

            //  Get the positive difference
            var depthDistance = linearZ - linearZOwn + ZOffset;
            if (depthDistance <= 0)
            {
                discard;
            }

            var softEdge = saturate(depthDistance * SoftEdgeInverseDistance);
            colorTarget.rgba *= softEdge;

            // SoftEdge END

            // DEBUG COLOR
            // colorTarget.g = 1;
        }
        else
        {
            // TODO Enable depth testing instead and delete this code

            float screenWidth  = ViewFrustum.x; //1280;
            float screenHeight = ViewFrustum.y; //720;

            var screenCoords = streams.ShadingPosition.xy;
            screenCoords.x /= screenWidth;
            screenCoords.y /= screenHeight;

            // Read depth
            float opaqueDepth = TextureDepth.Sample(Texturing.PointSampler, screenCoords).r;
            float ownDepth = streams.ShadingPosition.z;

            if (ownDepth >= opaqueDepth)
            {
                discard;
            }

            // DEBUG COLOR
            // colorTarget.r = 1;
        }

        colorTarget.a *= AlphaAdditive;

        streams.ColorTarget = colorTarget;
    }
    
    stage float4 Shading()
    {
        return ColorScale;
    }

    // -------------------------------------
    // Randomness
    // -------------------------------------

    //stage float4 GenerateRandomColor()
    //{
    //    float fSeed = (float) (streams.RandomSeed + ColorScaleOffset);

    //    return lerp(ColorScaleMin, ColorScaleMax, GetRandom(fSeed));
    //}

    // Some notes on randomness
    //  The algorithm below is uses unsigned integer as input and generates deterministic random values with good distribution.
    //  Because we can't pass uint as vertex input, we use a float and cast it twice to prevent interpolation errors.
    //  Also, casting a huge uint value to float causes underflow, so we limit the input value to 0 .. 0xFFFF (the masking is done on the CPU side)

    static const float  GelfondConst = 23.1406926327792690; // e to the power of Pi = (-1) to the power of -i
    static const float  GelfondSchneiderConst = 2.6651441426902251; // 2 to the power of sqrt(2)
    static const float2 Gelfond = float2(GelfondConst, GelfondSchneiderConst);
    static const float  Numerator = 123456789;

    stage float GetRandom(float fSeed)
    {
        // Cast to int once to prevent interpolation errors
        int uSeed = (int) (fSeed);
        fSeed = (float) uSeed;

        float2 rand2 = float2(cos(fSeed), sin(fSeed));

        float dotProduct = dot(rand2, Gelfond);

        return frac(fmod(Numerator, 1e-7 + 256.f * dotProduct));
    }
};
