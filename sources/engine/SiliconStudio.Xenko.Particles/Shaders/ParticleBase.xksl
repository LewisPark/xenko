// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.

class ParticleBase : ShaderBase, Texturing
{
    // -------------------------------------
    // streams
    // -------------------------------------
    stage stream float4 Position : POSITION;

    // -------------------------------------
    // conditional streams - may or may not be present depending on existing particle fields
    // -------------------------------------
    //stage stream float4 Color : COLOR;
    nointerpolation stage stream float Lifetime : BATCH_LIFETIME;
    nointerpolation stage stream float RandomSeed : BATCH_RANDOMSEED; // Ideally should be uint. Note! The xksl doesn't support nointerpolation, so cast the float as int before using it

    // -------------------------------------
    // uniforms
    // -------------------------------------

    // !When a bigger structure (float4) follow a smaller structure (float) the binding seems off
    // Declare the uniforms in the order float4x4 > float4 > float > uint

    cbuffer PerView
    {
        stage float4x4 MatrixTransform;
    }

    cbuffer PerMaterial
    {
        stage float4 ColorScale;

        // When the value is 0 there is no occlusion (100% emissive), when it is 1 there is 100% occlusion (still limited by alpha)
        stage float AlphaAdditive;
    }
            
    // -------------------------------------
    // VertexShader
    // -------------------------------------
    stage override void VSMain()
    {
        float4 worldPos = streams.Position;

        streams.ShadingPosition = mul(worldPos, MatrixTransform);
    }

    // Shading of the sprite
    stage override void PSMain()
    {
        float4 colorTarget = Shading();

        colorTarget.a *= AlphaAdditive;

        streams.ColorTarget = colorTarget;
    }

    //compose ParticleColor particleColor;

    stage float4 Shading()
    {
        return ColorScale;
        //return ColorScale * particleColor.Compute();
    }

    // -------------------------------------
    // Randomness
    // -------------------------------------

    //stage float4 GenerateRandomColor()
    //{
    //    float fSeed = (float) (streams.RandomSeed + ColorScaleOffset);

    //    return lerp(ColorScaleMin, ColorScaleMax, GetRandom(fSeed));
    //}

    // Some notes on randomness
    //  The algorithm below is uses unsigned integer as input and generates deterministic random values with good distribution.
    //  Because we can't pass uint as vertex input, we use a float and cast it twice to prevent interpolation errors.
    //  Also, casting a huge uint value to float causes underflow, so we limit the input value to 0 .. 0xFFFF (the masking is done on the CPU side)

    static const float  GelfondConst = 23.1406926327792690; // e to the power of Pi = (-1) to the power of -i
    static const float  GelfondSchneiderConst = 2.6651441426902251; // 2 to the power of sqrt(2)
    static const float2 Gelfond = float2(GelfondConst, GelfondSchneiderConst);
    static const float  Numerator = 123456789;

    stage float GetRandom(float fSeed)
    {
        // Cast to int once to prevent interpolation errors
        int uSeed = (int) (fSeed);
        fSeed = (float) uSeed;

        float2 rand2 = float2(cos(fSeed), sin(fSeed));

        float dotProduct = dot(rand2, Gelfond);

        return frac(fmod(Numerator, 1e-7 + 256.f * dotProduct));
    }
};
