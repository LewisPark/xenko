// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.

// TODO Move these definitions into a more base class
#ifndef True
# define True true
#endif

// TODO Move these definitions into a more base class
#ifndef False
# define False false
#endif

#ifndef UsesSoftEdge
# define UsesSoftEdge false
#endif

class ParticleBase : ShaderBase, Texturing, ParticleUtilities
{
    // -------------------------------------
    // Resources
    // -------------------------------------
    rgroup PerMaterial
    {
        stage Texture2D TextureDepth;
    }

    // -------------------------------------
    // streams
    // -------------------------------------

    // Shading position of the vertices/pixels
    stage stream float4 Position : POSITION;

    // Linear depth of the position in view space in world units, used for soft edges
    stage stream float ZDepth : Z_DEPTH_VALUE;

    // -------------------------------------
    // conditional streams - may or may not be present depending on existing particle fields
    // -------------------------------------
    //stage stream float4 Color : COLOR;
    nointerpolation stage stream float Lifetime : BATCH_LIFETIME;
    nointerpolation stage stream float RandomSeed : BATCH_RANDOMSEED; // Ideally should be uint. Note! The xksl doesn't support nointerpolation, so cast the float as int before using it

    cbuffer PerMaterial
    {
        stage float4 ColorScale;

        // When the value is 0 there is no occlusion (100% emissive), when it is 1 there is 100% occlusion (still limited by alpha)
        stage float AlphaAdditive;

        // Z offset is how much the depth should be adjusted when rendering
        stage float ZOffset;

        // 0 if disabled, equal to 1/Distance otherwise
        stage float SoftEdgeInverseDistance;
    }
            
    // -------------------------------------
    // VertexShader
    // -------------------------------------

    // Override Vertex shader main method from the ShaderBase class
    stage override void VSMain()
    {
        float4 worldPos = streams.Position;

        float4 viewPos = mul(worldPos, ViewMatrix);

        streams.ShadingPosition = mul(viewPos, ProjectionMatrix);

        // Z Offset
        viewPos.w = 1;
        viewPos.z += ZOffset;

        streams.ZDepth = viewPos.z;

        float4 viewProjPos = mul(viewPos, ProjectionMatrix);

        streams.ShadingPosition.z = (viewProjPos.z / viewProjPos.w) * streams.ShadingPosition.w;
    }

    // -------------------------------------
    // PixelShader
    // -------------------------------------

    // Override Pixel shader main method from the ShaderBase class
    stage override void PSMain()
    {
        float4 colorTarget = Shading();

        if (UsesSoftEdge)
        {
            float screenWidth  = ViewFrustum.x;
            float screenHeight = ViewFrustum.y;

            var screenCoords = streams.ShadingPosition.xy;
            screenCoords.x /= screenWidth;
            screenCoords.y /= screenHeight;

            // Convert to linear depth for proper edge smoothing
            float linearZOwn = -streams.ZDepth;
            float linearZOpaque = GetLinearDepth(TextureDepth.Sample(Texturing.PointSampler, screenCoords).r);

            //  Get the positive difference
            var depthDistance = linearZOpaque - linearZOwn;

            // TODO Maybe set upper and lower bounds for more interesting effects

            // smoothstep(...) looks more natural than saturate(...):
            var softEdge = smoothstep(0, 1, depthDistance * SoftEdgeInverseDistance); 
            colorTarget.rgba *= softEdge;
        }
        else
        {
            // Do nothing. The depth testing is enabled
        }

        colorTarget.a *= AlphaAdditive;

        streams.ColorTarget = colorTarget;
    }
    
    stage float4 Shading()
    {
        return ColorScale;
    }

};
