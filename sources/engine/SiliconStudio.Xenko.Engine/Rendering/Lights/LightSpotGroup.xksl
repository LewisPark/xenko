// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
namespace SiliconStudio.Xenko.Rendering.Lights
{
    /// <summary>
    /// Defines a group of spot lights
    /// </summary>
    class LightSpotGroup<int TMaxLightCount> : DirectLightGroup, NormalStream, PositionStream4, LightUtil
    {
        struct SpotLightData
        {
            float3 PositionWS;
            float3 DirectionWS;
            float3 AngleOffsetAndInvSquareRadius;
            [Color]
            float3 Color;
        };

        cbuffer PerLighting
        {
            SpotLightData Lights[TMaxLightCount];
        }

        override int GetMaxLightCount()
        {
            return TMaxLightCount;
        }

        /// <summary>
        /// Compute the light color/direction for the specified index within this group
        /// </summary>
        override void PrepareDirectLightCore(int lightIndex)
        {
            float3 lightVector = Lights[lightIndex].PositionWS - streams.PositionWS;
            float lightVectorLength = length(lightVector);
            float3 lightVectorNorm = lightVector / lightVectorLength;

            float3 lightAngleOffsetAndInvSquareRadius = Lights[lightIndex].AngleOffsetAndInvSquareRadius;
            float2 lightAngleAndOffset = lightAngleOffsetAndInvSquareRadius.xy;
            float lightInvSquareRadius = lightAngleOffsetAndInvSquareRadius.z;

            // TODO: Add support for disk based Directional light
            float3 lightDirection = -Lights[lightIndex].DirectionsWS;

            float attenuation = 1;
            attenuation *= GetDistanceAttenuation(lightVector , lightInvSquareRadius);
            attenuation *= GetAngleAttenuation(lightVectorNorm, lightDirection, lightAngleAndOffset.x, lightAngleAndOffset.y);

            streams.lightColor = Lights[lightIndex].Color * attenuation;
            streams.lightDirectionWS = lightDirection;
        }
    };
}